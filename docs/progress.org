* Как будет выглядеть приложение?
Основной принцип — как можно меньше действий со стороны пользователя.

Возможные варианты:
1. Standalone-приложение ВК + расширение для браузера
Два действия со стороны пользователя: установка приложения, установка расширения для браузера.
   - Пользователь устанавливает себе приложение и расширение для браузера (упростить?).
   - Пользователь заходит в ВК. Стартует скрипт обновления аудиозаписей.
   - Смотрим, сколько аудиозаписей доступно, инфу по каждой шлём в чапи (artist, song, lhash -- lyrics hash).
   - Движок проверяет актуальность аккордов (lhash_old == lhash_new) и возвращает musicxml, если аккорды не актуальны.
   - Обновляем тексты песен через VK API.
2. Open API
Одно действие со стороны пользователя: авторизация на нашем сайте через ВК.
   - Разрабатываем сайт
   - Авторизуем на нём пользователя с помощью Open API: http://vk.com/dev/openapi.
   - Просим разрешение к аудиозаписям.
   - Запускаем скрипт обновления аудиозаписей.
   - http://vk.com/dev/api_requests

Останавливаемся на сайте.

Размещаем тестовые движки на хостинге rhcloud:
- http://engine-chordials.rhcloud.com/
Томкат для движка Кордиалз.
- http://my-chordials.rhcloud.com/
Основной сайт на Пайтоне.
* myChordials
- [X] Авторизация
- [.] Получаем список песен
- [ ] Отправляем данные в движок
